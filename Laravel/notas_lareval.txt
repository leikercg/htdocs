@@@@@@@@@@@@@@@@@@@@@@@@ CREAR CLAVE SEGURA @@@@@@@@@@@@@@@@@@@@@@@@ ESTO ES LO PRIMERO QUE HAY QUE HACER EN CUALQUIER PROYECTO DE LARAVEL

php artisan key:generate

@@@@@@@@@@@@@@@@@@@@@@@ ACTUALIZAR VENDOR ARCHIVOS  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

COMPOSER UPDATE

@@@@@@@@@@@@@@@@@@@@@@@@@@Descargar paquete @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@-----este primero

 composer require pestphp/pest --dev sin --dev es para producción

 composer.json> indica las dependencias requeridas
 composer.lock> indica las versiones descargadas

 composer install installa vendor
 comporser update lo actualiza

LOS PASOS ANTERIORES ESTÁN RELACIONADOS CON GIT: NO OLVIDAR REESCRIBIR EL ARCHVIO .ENV


Métodos: se nombran en camelCase y con minúscula al principio.
Ejemplo: RegisteredUser::getAll()
Atributos: se nombran en snake_case y con minúscula al principio.
Ejemplo: RegisteredUser::first_name
Variables: camelCase camelCases
Columnas de las tablas: se nombran en snake_case, sin referencia al nombre de la tabla.
Ejemplo: first_name
Claves ajenas: Se forman con el nombre de la tabla ajena en singular más la palabra id.
Ejemplo: article_id



@@@@@@@@@@@@@@@@@@@@@@ modicicar env @@@@@@@@@@@@@@@@@@

'default' => env('DB_CONNECTION', 'mysql')


@@@@@@@@@@@@@@@@@@@@@@@@ CREAR CONTROLADOR @@@@@@@@@@@@@@@@@@@@@@@@

php artisan make:controller RegisterUserController

php artisan make:controller RegisterUserController --resource

@@@@@@@@@@@@@@@@@@@@@@@@ CREAR CONTROLADOR TIPO API @@@@@@@@@@@@@@@@@@@@@@@@

php artisan make:controller RegisterUserController --api

Route::apiResource('usuarios', 'RegisterUserController');-----> añaidir esto al enrutador


@@@@@@@@@@@@@@@@@@@@@@@@ LISTA DE COMANDOS DE ARTISAN @@@@@@@@@@@@@@@@@@@@@@@@

php artisan list

@@@@@@@@@@@@@@@@@@@@@@@@ EJECUTAR LAS TODAS LAS MIGRACIONES ejecuta todas las que no estan @@@@@@@@@@@@@@@@@@@@@@@@

php artisan migrate OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO

@@@@@@@@@@@@@@@@@@@@@@@@ EJECUTAR LAS MIGRACIONES ejecuta una @@@@@@@@@@@@@@@@@@@@@@@@

php artisan migrate --path=/database/migrations/nombre_de_la_migracion.php


@@@@@@@@@@@@@@@@@@@@@@@@ EJECUTAR LOS SEADER, TODOS LOS ALMACENADOS EN SEEDAR DB @@@@@@@@@@@@@@@@@@@@@@@@

php artisan db:seed 000000000000000000000000000000000000000000000000000000

@@@@@@@@@@@@@@@@@@@@@@ EJECUTAR UN SEEDER EN CONCRETO @@@@@@@@@@@@@@@@@@@@@@@@@@

php artisan db:seed --class=UsuariosSeeder

@@@@@@@@@@@@@@@@@@@@@@@@ CREAR MIGRACION MODIFICAR @@@@@@@@@@@@@@@@@@@@@@@@

php artisan make:migration add_email_to_clients --table=registered_users    plural

@@@@@@@@@@@@@@@@@@@@@@@@ CREAR MIGRACION CREAR @@@@@@@@@@@@@@@@@@@@@@@@

php artisan make:migration add_email_to_clients --create=registered_users   plurar

@@@@@@@@@@@@@@@@@@@@@@@@ REVERTIR ULTIMA MIGRACION @@@@@@@@@@@@@@@@@@@@@@@@

php artisan migrate:rollback

@@@@@@@@@@@@@@@@@@@@@@@ DEJAR BD ESTADO ORIGINAL, VACIA@@@@@@@@@@@@@@@@@@@@@@@@

php artisan migrate:reset

@@@@@@@@@@@@@@@@@@@@@@@ REVERTIR N MIGRACIONES@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

php artisan migrate:rollback --step=3

@@@@@@@@@@@@@@@@@@@@@@@@@@ Resetear la BD y reconstruirla lanzando todas las migraciones @@@@@@@@@@@@@@@@@@@@@@@@@@@

php artisan migrate:refresh //--seed ejecutar seeders mantiene el hisotorial de migraciones 0000000000000000000000000000000000

@@@@@@@@@@@@@@@@@@@@@@@@@@ Elimina las tablas y reconstruirla lanzando todas las migraciones @@@@@@@@@@@@@@@@@@@@@@@@@@@

php artisan migrate:fresh //--seed ejecutar seeders NO mantiene el hisotorial de migraciones

@@@@@@@@@@@@@@@@@@@@@@@@ INSTALAR MIGRACION @@@@@@@@@@@@@@@@@@@@@@@@

php artisan migrate:install

@@@@@@@@@@@@@@@@@@@@@@@@ CREAR SEEDER @@@@@@@@@@@@@@@@@@@@@@@@

php artisan make:seeder UsersTableSeeder

@@@@@@@@@@@@@@@@@@@@@@@ EJECUTAR UN UNICO SEEDER@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

php artisan db:seed --class-UsersTableSeeder


@@@@@@@@@@@@@@@@@@@@@@@@ CREAR MODELO @@@@@@@@@@@@@@@@@@@@@@@@

php artisan make:model RegisterUser        CamelCase singular

@@@@@@@@@@@@@@@@@@@@@@@@ CREAR MODELO y migracion @@@@@@@@@@@@@@@@@@@@@@@@

php artisan make:model RegisterUser -m

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ VERBOS LARABEL @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Route::get();    // Solicitudes habituales, para acceder a información
Route::post();   // Recepción de datos de formulario (para INSERT) para crear usuarios
Route::put();    // Recepción de datos para UPDATE, para actualizar todos los campos, también puede escribirse :
Route::patch(), que es para actualizar un campo
Route::delete(); // Recepción de datos para DELETE
Route::patch(array('GET','POST'), 'ruta', acción)  // Responderá tanto a GET como a POST





<form action="/foo/bar" method="POST">
    @method('DELETE')
    @method('PATCH')
    @method('PUT')












@@@@@@@@@@@@@@@@@@@@@@@@ rutas resource@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


Route::get('user', 'UserController@index')->name('user.index');         // Recupera todos los usuarios

Route::get('user/{user}', 'UserController@show')->name('user.show');    // Recupera usuario con id=user

Route::get('user/crear', 'UserController@create')->name('user.create'); // Lanza el formulario de creación de usuarios

Route::post('user/{user}', 'UserController@store')->name('user.store');        // Recoge los datos del formulario y los inserta en la base de datos

Route::get('user/{user}/edit', 'UserController@edit')->name('user.edit');      // Lanza el formulario de modificación de usuarios

Route::patch('user/{user}', 'UserController@update')->name('user.update');     // Recoge los datos del formulario y modifica el usuario de la base de datos

Route::delete('user/{user}', 'UserController@destroy')->name('user.destroy');  // Elimina al usuario de la base de datos


Todo esto en una linea::--------->  Route::resource('user');










@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ BLADE @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@section → Marca el inicio de una sección de contenido.

@endsection → Marca el final de una sección.

@show → Marca el final de una sección y la muestra.

@yield(‘section’) → Muestra el contenido de una sección, si existe.

@extends(‘view’) → Hereda de una plantilla padre.

@parent → Muestra el contenido de la sección del mismo nombre en la plantilla padre.

@include(‘view’) → Incluye una subvista.

@if - @else - @endif → Condicional.

@for - @endfor → Bucle for clásico.

@foreach - @endforeach → Bucle foreach.

@forelse - @empty - @endforelse → Como foreach, pero con tratamiento de arrays que vienen vacíos (es como un foreach dentro de un if).

@break - @continue → Para usar en los bucles.

@switch - @case - @break → Condicional múltiple.

@isset($variable) - @endisset → Comprueba si la variable existe.

@auth - @endauth → La sección solo se muestra si hay un usuario autenticado en la aplicación.





@php - @endphp → Para añadir código PHP plano. Usar con moderación.
{{- Comment -}} → Comentarios (no serán renderizados).

{{ $variable }} → Equivalente a echo $variable, pero no es necesario abrir y cerrar PHP, y nos protegemos contra inyección de JS.

{{ $variable ?? texto-por-defecto }} → Como el anterior, pero chequea si la variable existe. Si no existe, muestra texto-por-defecto.


$loop → Es una variable muy útil para usar al depurar un foreach. Nos dice si estamos en el primer elemento, en el último, cuántos loops llevamos, etc.



<form method="POST" action="{{ route('mi-ruta') }}"> <!--Ruta por su nombre-->
//@method(delete)

    @if ($errors->any())
        @foreach ($errors->all() as $error) // para validar datos del formulario
            {{ $error }}<br>
        @endforeach
    @endif


    @csrf   <!-- Para evitar ataques CSRF -->
    <input type="email" name="email"><br>
    <input type="text" name="asunto"><br>
    <textarea name="contenido"></textarea><br>
    <button type="submit">Enviar</button>
</form>

en el metodo correspondiente quedaria asi:


public function store() {
    request->validate([                           //metodo para validar formularios
        'email' => 'required|email',              //clave->valor  email debe ser e-mail y required
        'asunto' => 'required'                   //asunto debe ser required
    ]); // A partir de aquí, se procesa el formulario igual que antes


    //resto del methodo
}

en caso de producirse un error volveria a mostrar el formulario con los codigos de error correspondiente



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ACIONES CON ROUTAS @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

$url = route('profile.show', ['id' => 1]);

<a href="{{ route('profile.show', ['id' => 1]) }}">Ver perfil</a>

return redirect()->route('profile.show', ['id' => 1]);

if (Route::currentRouteName() == 'profile.show') {
    // La ruta actual coincide con 'profile.show'
}


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ rutas con parametros @@@@@@@@@@@@@@@@@@@@@@@@@@@
<a href="{{ route('pelicula', ['id' => $id, 'otro_parametro' => $valor]) }}">Enlace con múltiples parámetros</a>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ rutas con parametros en medio @@@@@@@@@@@@@@@@@@@@@@
<a href="{{ route('pelicula', ['id' => $movie->id]) }}/director">Ver director</a>





@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ELOQUENT @@@@@@@@@@@@@@@@@@@@@@@@

$users = DB::table("users")->get();
$users = DB::table("users")->where("name", "=", "Ana")->first();
$users = DB::table("users")->where("edad", ">=", 18)->orderBy("apellidos");
$maxId = DB::table("users")->max("id");
$existe = DB::table("users")->where("id", "=", $id)->exists();
$users = DB::table("users")->select("nombre, apellidos as apell")->get();

---------AQUI creando instancias------
 $genero=Genres::where('genre',$g)->first();//instancia de genero
        // o
        //$genero = Genres::where('genre', $g)->first(); para coger el primero

        $movies=Movie::where('genre_id',$genero->id)->get(); //para coger todos
        $data['movies']=$movies;
        $data['genero']= strtoupper($g);
        return view('genero',$data);

----------------------- selecionar solo unos campos-------------------------
$movies = Movie::select('name', 'director')->where('id', 6)->get();





-------sql crudo------
$resultado = DB::raw('escribe-aquí-tu-sentencia-SQL');

------con parametros se pasa arrays para asignar cada ?-----
$genero = Genres::whereRaw('LOWER(genre) = ? and date = ?', [strtolower($g), $date])->first();

---------------con un solo parametro------------

$genero = Genres::whereRaw('LOWER(genre) = ?', strtolower($g))->first();

------------------------ varios where en  una condicional---------------------

$data['movies'] = Movie::where('release_date', '<', $date)
                       ->where('genre', $genre)
                       ->get();


















@@@@@@@@@@@@@@@@@@@@@@@ isset, empty if @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@isset($variable)
    La variable está definida y no es nula.
@else
    La variable no está definida o es nula.
@endisset
---------------------------------------------
@empty($variable)
    La variable está definida pero está "vacía".
@else
    La variable tiene contenido.
@endempty
--------------------------------------------------
@if(isset($variable) && $variable == 'valor')
    La variable está definida y tiene el valor 'valor'.
@else
    La variable no está definida o no tiene el valor 'valor'.
@endif



















@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ REQUEST HELPER @@@@@@@@@@@@@@@@@@@@@@@

request()->url() → Devuelve un string con la ruta actual (completa).

request()->path() → Devuelve un string con la ruta actual (solo desde la raíz de la aplicación, sin http ni el nombre del servidor).

request()->is(“ruta”) → Devuelve true si coincide con la ruta actual.

request()->input(“campo”) → Devuelve el valor de “campo” (enviado desde formulario).

request()->all() → Devuelve un array con todos los campos.

request()->has(“campo”) → Devuelve true si en la petición existe un campo con el nombre indicado.

request()->isMethod(“método”) → Devuelve true si la petición se hizo por el método indicado (POST, GET, PUT, etc).





@@@@@@@@@@@@@@@@@@@@@@@@@ REDIRECT @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

use Illuminate\Support\Facades\Redirect;

Route::get('/redireccionar', function () {
    // Redirigir a una ruta específica
    return redirect('/nueva-ruta');

    // Redirigir a una ruta con parámetros
    return redirect('/nueva-ruta')->with('parametro', 'valor');

    // Redirigir a una ruta con un nombre de ruta
    return redirect()->route('nombre.ruta');

    // Redirigir a una ruta con un nombre de ruta y parámetros
    return redirect()->route('nombre.ruta', ['parametro' => 'valor']);

    // Redirigir a la URL anterior
    return redirect()->back();

    // Redirigir con un mensaje de sesión
    return redirect('/')->with('mensaje', '¡Redirección exitosa!');
});

----EJEMPLO:
class UserController extends Controller
{
    public function store(Request $request)
    {
        // Aquí iría la lógica para guardar al usuario en la base de datos

        // Después de guardar al usuario, devolver la vista del home
        return redirect('/home');
    }
}

return redirect('user/login');
return redirect()->action('LoginController@login');
return back();




@@@@@@@@@@@@@@@@@@@@@@@@@@@@ FECHAS@@@@@@@@@@@@@@@@@@@@@@@@@

Controlador::
$fechaActual = Date::now();
$fechaActual->format('d/m/Y H:i:s')   ///fecha con formato

---acceder a los datos ---:
<p>Año: {{ $fechaActual->year }}</p>
<p>Mes: {{ $fechaActual->month }}</p>
<p>Día: {{ $fechaActual->day }}</p>
<p>Hora: {{ $fechaActual->hour }}</p>
<p>Minutos: {{ $fechaActual->minute }}</p>
<p>Segundos: {{ $fechaActual->second }}</p>

l: Representa el día de la semana completo en texto (por ejemplo, "Monday").
j: Representa el día del mes sin ceros iniciales (por ejemplo, "1" a "31").
F: Representa el mes completo en texto (por ejemplo, "January" a "December").
Y: Representa el año con cuatro dígitos (por ejemplo, "2024").





Relaciones:
---------------------------------------------------------------------------------------
1 a N:
 tabla maestra:

 public function contact() {
        return $this->hasMany('App\Models\Contact');
    }

tabla no maestra:

public function employee() {
        return $this->belongsTo('App\Models\Employee');
    }
---------------------------------------------------------------------------------------

1 a 1:
 Tabla maestra:

 public function director()
    {
        return $this->hasOne('App\Models\Director');
    }

Tabla no maestra:

public function movie()
    {
        return $this->belongsTo('App\Models\Movie');
    }
--------------------------------------------------------------------------------------

N a N

Tabla maestra:
public function roles()
    {
        return $this->belongsToMany(Role::class);
    }

Tabla no maestra:
 public function users()
    {
        return $this->belongsToMany(User::class);
    }



-------------------------------------------------------------------
ejemplos de migraciones:

 Schema::table('users', function (Blueprint $table) {
            $table->renameColumn('old_column_name', 'new_column_name');
        });

        datos:
        $table->string('name', 100);
        $table->string('email')->after('name');
        $table->bigIncrements('id');
        $table->string('middle_name')->nullable();
        $table->string('status')->default('active');
        $table->unique('email');
        $table->primary('id');
        $table->foreign('user_id')->references('id')->on('users');
        $table->unique(['first_name', 'last_name']);         varias columnas
        $table->integer('age')->nullable()->default(18)->check('age >= 18');    chekear la edad





